/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   bonus_ft_hook                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ayarmaya <ayarmaya@student.42nice.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/25 17:05:21 by ayarmaya          #+#    #+#             */
/*   Updated: 2024/02/25 17:05:50 by ayarmaya         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../include/so_long.h"

int	exit_destroy_game(t_vars *game)
{
	ft_printf("\033[5m\033[31m\n\n[ESC] : Partie quittée !\n\n\033[0m");
	mlx_destroy_window(game->mlx_ptr, game->win_ptr);
	mlx_destroy_display(game->mlx_ptr);
	free(game->mlx_ptr);
	exit(EXIT_SUCCESS);
}

int	mousse_close_window(t_vars *game)
{
	ft_printf("\033[5m\033[31m\n\n[X Close] : Partie quittée !\n\n\033[0m");
	mlx_destroy_window(game->mlx_ptr, game->win_ptr);
	mlx_destroy_display(game->mlx_ptr);
	free(game->mlx_ptr);
	exit(EXIT_SUCCESS);
	return (0);
}

int	you_win(t_vars *game)
{
	ft_printf("\033[5m\033[32m\n\n[EXIT] : Vous avez gagné !\n\n\033[0m");
	mlx_destroy_window(game->mlx_ptr, game->win_ptr);
	mlx_destroy_display(game->mlx_ptr);
	free(game->mlx_ptr);
	exit(EXIT_SUCCESS);
	return (0);
}

int	animation(t_vars *game)
{
	static int bool = 1; // Garde l'état de l'animation entre les appels
	static struct timeval last_change = {0, 0}; // Temps du dernier changement d'état
	struct timeval current_time;
	long time_difference;

	gettimeofday(&current_time, NULL); // Obtenir le temps actuel

	// Calculer la différence de temps en microsecondes
	time_difference = (current_time.tv_sec - last_change.tv_sec) * 1000000L + (current_time.tv_usec - last_change.tv_usec);

	// Vérifier si 0,5 seconde s'est écoulée
	if (time_difference > 500000) {
		if (bool == 0) {
			set_fire_right(game);
			bool = 1;
		} else {
			set_fire_left(game);
			bool = 0;
		}
		last_change = current_time; // Mettre à jour le temps du dernier changement
	}
	return (1);
}

int	handle_input(int keysym, t_vars *game)
{
	game->nbr_moov++;
	if (keysym == 65307)
		exit_destroy_game(game);
	else if (keysym == 65361 || keysym == 97)
		move_left(game);
	else if (keysym == 65362 || keysym == 119)
		move_up(game);
	else if (keysym == 65363 || keysym == 100)
		move_right(game);
	else if (keysym == 65364 || keysym == 115)
		move_down(game);
	else
	{
		ft_printf("\033[31mTouche invalide !              \r\033[0m");
		game->nbr_moov--;
	}
	return (0);
}